"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDistanceInKm = exports.km2au = exports.au2km = void 0;
var dimensions_1 = require("../earth/constants/dimensions");
var angleCalc_1 = require("./angleCalc");
var math_1 = require("./math");
var AU_UNIT_OF_LENGTH = 149597870700.0;
function au2km(R) {
    return R * (AU_UNIT_OF_LENGTH / 1000);
}
exports.au2km = au2km;
function km2au(km) {
    return km / (AU_UNIT_OF_LENGTH / 1000);
}
exports.km2au = km2au;
function getDistanceInKm(location1, location2) {
    var lat1 = location1.lat, lon1 = location1.lon;
    var lat2 = location2.lat, lon2 = location2.lon;
    var F = (lat1 + lat2) / 2;
    var G = (lat1 - lat2) / 2;
    var lambda = (lon2 - lon1) / 2;
    var FRad = (0, angleCalc_1.deg2rad)(F);
    var GRad = (0, angleCalc_1.deg2rad)(G);
    var lambdaRad = (0, angleCalc_1.deg2rad)(lambda);
    var S = (0, math_1.sin2)(GRad) * (0, math_1.cos2)(lambdaRad) + (0, math_1.cos2)(FRad) * (0, math_1.sin2)(lambdaRad);
    var C = (0, math_1.cos2)(GRad) * (0, math_1.cos2)(lambdaRad) + (0, math_1.sin2)(FRad) * (0, math_1.sin2)(lambdaRad);
    var omegaRad = Math.atan(Math.sqrt(S / C));
    var R = Math.sqrt((S * C)) / omegaRad;
    var D = 2 * omegaRad * dimensions_1.EARTH_RADIUS / 1000;
    var H1 = (3 * R - 1) / (2 * C);
    var H2 = (3 * R + 1) / (2 * S);
    return D * (1 + dimensions_1.EARTH_FLATTENING * H1 * (0, math_1.sin2)(FRad) * (0, math_1.cos2)(GRad) - dimensions_1.EARTH_FLATTENING * H2 * (0, math_1.cos2)(FRad) * (0, math_1.sin2)(GRad));
}
exports.getDistanceInKm = getDistanceInKm;
